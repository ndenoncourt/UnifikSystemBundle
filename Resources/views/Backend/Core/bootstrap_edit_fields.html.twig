{% extends 'UnifikSystemBundle:Form:bootstrap_3_horizontal_layout.html.twig' %}

{% block form_start %}
{% spaceless %}
    {% set method = method|upper %}
    {% if method in ["GET", "POST"] %}
        {% set form_method = method %}
    {% else %}
        {% set form_method = "POST" %}
    {% endif %}
    <form novalidate="novalidate" method="{{ form_method|lower }}" action="{{ action }}"{% for attrname, attrvalue in attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}{% if multipart %} enctype="multipart/form-data"{% endif %}>
    {% if form_method != method %}
        <input type="hidden" name="_method" value="{{ method }}" />
    {% endif %}
{% endspaceless %}
{% endblock form_start %}

{% block form_row -%}
{% spaceless %}
    <div class="form-group{% if (not compound or force_error|default(false)) and not valid %} has-error{% endif %}{% if '[translation]' in full_name %} form-group-translation{% endif %}">
        {{ form_label(form) }}
        <div class="{{ block('form_group_class') }}">
            {{ form_widget(form) }}

            {% if attr.alt is defined %}
                <div class="note">{{ attr.alt|trans|raw }}</div>
            {% endif %}
            {{ form_errors(form) }}
        </div>
    </div>
{% endspaceless %}
{%- endblock form_row %}

{% block date_widget %}
    {% if widget == 'single_text' %}
        <input type="text" {{ block('widget_attributes') }} value="{{ value }}" class="calendar" />
    {% else %}
        <div {{ block('widget_container_attributes') }}>
            {{ date_pattern|replace({
            '{{ year }}' : form_widget(form.year),
            '{{ month }}': form_widget(form.month),
            '{{ day }}'  : form_widget(form.day),
            })|raw }}
        </div>
    {% endif %}
{% endblock date_widget %}

{% block choice_widget %}
    {% spaceless %}
        {% if expanded %}
            {% set attr = attr|merge({'class': (attr.class|default('') ~ ' choice-expanded')|trim}) %}
            <ul {{ block('widget_container_attributes') }}>
                {% for key, child in form %}
                    <li>
                        {{ form_widget(child) }}{{ form_label(child, null, {'withoutColon': true, 'entity': child.vars.data}) }}
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            {% set attr = attr|merge({'class': (attr.class|default('') ~ ' form-control input-sm')|trim}) %}
            <select {{ block('widget_attributes') }}{% if multiple %} multiple="multiple"{% endif %}>
                {% if placeholder is not none %}
                    <option value="">{{ placeholder|trans }}</option>
                {% endif %}
                {% if preferred_choices|length > 0 %}
                    {% set options = preferred_choices %}
                    {{ block('choice_widget_options') }}
                    {% if choices|length > 0 and separator is not none %}
                        <option disabled="disabled">{{ separator }}</option>
                    {% endif %}
                {% endif %}
                {% set options = choices %}
                {{ block('choice_widget_options') }}
            </select>
        {% endif %}
    {% endspaceless %}
{% endblock choice_widget %}

{% block choice_widget_options %}
{% spaceless %}
    {% for group_label, choice in options %}
        {% if choice is iterable %}
            <optgroup label="{{ group_label|trans({}, translation_domain) }}">
                {% set options = choice %}
                {{ block('choice_widget_options') }}
            </optgroup>
        {% else %}
            <option value="{{ choice.value }}"{% if choice is selectedchoice(value) %} selected="selected"{% endif %}>
                {%- if choice.data.id is defined -%}
                    {{ choice.data|transTitle|striptags|truncate(100)|raw }}
                {%- else -%}
                    {{ choice.label|trans({}, translation_domain) }}
                {%- endif -%}
            </option>
        {% endif %}
    {% endfor %}
{% endspaceless %}
{% endblock choice_widget_options %}

{% block tree_choice_widget_options %}
{% spaceless %}
    {% for group_label, choice in options %}
        {% if choice is iterable %}
            <optgroup label="{{ group_label|trans({}, translation_domain) }}">
                {% set options = choice %}
                {{ block('tree_choice_widget_options') }}
            </optgroup>
        {% else %}
            <option value="{{ choice.value }}"{% if choice is selectedchoice(value) %} selected="selected"{% endif %}>{% if levels is defined and levels['level_id_' ~ choice.value] is defined %}{{ tree_indentation(levels['level_id_' ~ choice.value])|raw }}{% endif %}{{ choice.data|transTitle }}</option>
        {% endif %}
    {% endfor %}
{% endspaceless %}
{% endblock tree_choice_widget_options %}

{% block tree_choice_widget %}
{% spaceless %}
    {% if expanded %}
        {% set attr = attr|merge({'class': (attr.class|default('') ~ ' choice-expanded')|trim}) %}
        <ul {{ block('widget_container_attributes') }}>
            {% if add_select_all is defined %}
                {% block select_all %}
                <li>
                    <div class="select_all_wrapper checkbox ckbox ckbox-primary">
                        <input type="checkbox" name="select_all_{{ id }}" id="select_all_{{ id }}" value="" class="select_all" /><label for="select_all_{{ id }}">{% trans %}Select All{% endtrans %}</label>
                    </div>
                </li>
                {% endblock %}
                {% block javascripts %}
                    {{ parent() }}

                    <script type="text/javascript">
                        var str_select_all = '{% trans %}Select all{% endtrans %}';
                        var str_unselect_all = '{% trans %}Unselect all{% endtrans %}';
                    </script>

                    {% javascripts
                        '@UnifikSystemBundle/Resources/public/backend/js/tree-choice.js'
                    %}
                    <script type="text/javascript" src="{{ asset_url }}"></script>
                    {% endjavascripts %}
                {% endblock  %}
            {% endif %}
        {% for key, child in form %}
            <li>
                {{ form_widget(child) }}{{ form_label(child, null, {'withoutColon': true, 'entity': form.vars.choices[key].data}) }}
            </li>
        {% endfor %}
        </ul>
    {% else %}
    {% set attr = attr|merge({'class': (attr.class|default('') ~ ' form-control input-sm')|trim}) %}
    <select {{ block('widget_attributes') }}{% if multiple %} multiple="multiple"{% endif %}>
        {% if placeholder is not none %}
            <option value="">{{ placeholder|trans }}</option>
        {% endif %}
        {% if preferred_choices|length > 0 %}
            {% set options = preferred_choices %}
            {{ block('tree_choice_widget_options') }}
            {% if choices|length > 0 and separator is not none %}
                <option disabled="disabled">{{ separator }}</option>
            {% endif %}
        {% endif %}
        {% set options = choices %}
        {{ block('tree_choice_widget_options') }}
    </select>
    {% endif %}
{% endspaceless %}
{% endblock tree_choice_widget %}

{% block checkbox_widget_extended %}
    {% spaceless %}
        {% if level is defined %}{{ tree_indentation(level)|raw }}{% endif %}<input type="checkbox" {{ block('widget_attributes') }}{% if value is defined %} value="{{ value }}"{% endif %}{% if checked %} checked="checked"{% endif %}{% if level is defined %} data-level="{{ level }}"{% endif %} />
    {% endspaceless %}
{% endblock %}

{% block checkbox_radio_label %}
    {# Do no display the label if widget is not defined in order to prevent double label rendering #}
    {% if widget is defined %}
        {% if required %}
            {% set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' required')|trim}) %}
        {% endif %}
        {% if parent_label_class is defined %}
            {% set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' ' ~ parent_label_class)|trim}) %}
        {% endif %}
        {% if label is not sameas(false) and label is empty %}
            {% set label = name|humanize %}
        {% endif %}
        {% if not compound %}
            {% set label_attr = label_attr|merge({'for': id}) %}
        {% endif %}
        {{- widget|raw -}}
        <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
            {{- label is not sameas(false) ? label|trans({}, translation_domain) -}}
        </label>
    {% endif %}
{% endblock checkbox_radio_label %}

{% block checkbox_widget -%}
    {% set parent_label_class = parent_label_class|default('') -%}
    {% if 'checkbox-inline' in parent_label_class %}
        {{- form_label(form, null, { widget: block('checkbox_widget_extended') }) -}}
    {% else -%}
        <div class="checkbox ckbox ckbox-primary">
            {{- form_label(form, null, { widget: block('checkbox_widget_extended') }) -}}
        </div>
    {%- endif %}
{%- endblock checkbox_widget %}

{% block radio_widget_extended %}
    {% spaceless %}
        {% if level is defined %}{{ tree_indentation(level)|raw }}{% endif %}<input type="radio" {{ block('widget_attributes') }}{% if value is defined %} value="{{ value }}"{% endif %}{% if checked %} checked="checked"{% endif %} />
    {% endspaceless %}
{% endblock %}

{% block radio_widget -%}
    {%- set parent_label_class = parent_label_class|default('') -%}
    {% if 'radio-inline' in parent_label_class %}
        {{- form_label(form, null, { widget: block('radio_widget_extended') }) -}}
    {% else -%}
        <div class="radio">
            {{- form_label(form, null, { widget: block('radio_widget_extended') }) -}}
        </div>
    {%- endif %}
{%- endblock radio_widget %}

{% block form_label -%}
{% spaceless %}
    {% if name != 'translation' %}
        {% if label is sameas(false) %}
            <div class="{{ block('form_label_class') }}"></div>
        {% else %}
            {% set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' ' ~ block('form_label_class'))|trim}) %}
            {% if not compound -%}
                {% set label_attr = label_attr|merge({'for': id}) %}
            {%- endif %}
            {% if label is empty -%}
                {% set label = name|humanize %}
            {%- endif -%}
            <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
                {% if required and checked is not defined %}
                    {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
                    <span class="required" title="{% trans %}This field is required{% endtrans %}">* </span>
                {%- endif %}
                {%- if entity.id is defined -%}
                    {% include 'UnifikSystemBundle:Backend/Core:entity_title.html.twig' with { 'entity': entity } %}
                {%- else -%}
                    {{ label|trans|raw }}
                {%- endif -%}
            </label>
        {% endif %}
    {% endif %}
{% endspaceless %}
{%- endblock form_label %}

{% block advanced_file_widget %}
    {% spaceless %}
        {% if has_file %}
            <div class="uploaded_file">
                <a href="{{ file_web_path }}" target="_blank">{{ file_value }}</a>
            </div>

            {% if deletable or not required %}
                <div class="delete_uploaded_file">
                    <label for="{{ file_name ~ '_delete' }}">{% trans %}Delete:{% endtrans %}</label>
                    <input type="checkbox" id="{{ file_name ~ '_delete' }}" name="{{ file_name ~ '_delete' }}" value="1" />
                </div>
            {% endif %}

            {% trans %}Replace:{% endtrans %} <br />
        {% endif %}

        <input type="file" {{ block('widget_attributes') }} />
    {% endspaceless %}
{% endblock %}

{% block advanced_image_widget %}
    {% spaceless %}
        {% if has_file %}

            <div class="uploaded_file">
                <a href="{{ file_web_path }}" target="_blank">
                    <img src="{{ file_web_path }}" alt="" style="max-height: 300px" />
                </a>
            </div>

            {% if deletable or not required %}
                <div class="delete_uploaded_file">
                    <label for="{{ file_name ~ '_delete' }}">{% trans %}Delete:{% endtrans %}</label>
                    <input type="checkbox" id="{{ file_name ~ '_delete' }}" name="{{ file_name ~ '_delete' }}" value="1" />
                </div>
            {% endif %}

            {% trans %}Replace:{% endtrans %} <br />
        {% endif %}

        <input type="file" {{ block('widget_attributes') }} />
    {% endspaceless %}
{% endblock %}

{% block creatable_entity_widget %}
    {% spaceless %}
        {{ block('choice_widget') }}
        <a href="{{ path(quick_create_route) }}" class="btn btn-primary btn-xs quick_create_link{% if not form.vars.expanded %} aside{% endif %}"><i class="fa fa-plus-square mr5"></i>{% if form.vars.quick_create_label %}{{ form.vars.quick_create_label|trans({ '%entity%': entity_name|trans }) }}{% else %}{% trans with { '%entity%': entity_name|trans } %}Create a new %entity%{% endtrans %}{% endif %}</a>
        <div class="quick_create_container" data-input-id="{{ form.vars.id }}" data-input-name="{{ form.vars.full_name }}" data-input-type="{% if not form.vars.expanded %}select{% elseif form.vars.multiple %}checkbox{% else %}radio{% endif %}"></div>
    {% endspaceless %}
{% endblock %}

{% block widget_container_attributes %}
{% spaceless %}
    {% if id is not empty %}id="{{ id }}" {% endif %}
    {% for attrname, attrvalue in attr %}{% if attrname in ['placeholder', 'title'] %}{{ attrname }}="{{ attrvalue|trans({}, translation_domain) }}" {% else %}{{ attrname }}="{{ attrvalue }}" {% endif %}{% endfor %}
{% endspaceless %}
{% endblock widget_container_attributes %}

{% block media_select_widget %}
    {% include 'UnifikMediaBundle:Backend/Form:fields.html.twig' with {'widget_attributes': block('widget_attributes')} %}
{% endblock %}

{% block taggable_widget %}
    {{ block('choice_widget') }}
    {% if form.vars.use_fcbkcomplete %}
        <script>
            $(function(){
                if (typeof $.fn.fcbkcomplete !== 'undefined') {
                    // Add a selected class on selected elements so FCBKComplete automatically add it
                    $('#{{ form.vars.id }} > option:selected').addClass('selected');

                    $('#{{ form.vars.id }}').fcbkcomplete({
                        addontab: true,
                        complete_text: '{% trans %}Start typing...{% endtrans %}',
                        newel: {{ form.vars.allow_add ? 'true' : 'false' }},
                        filter_selected: true,
                        maxitems: Number.MAX_VALUE
                    });
                } else {
                    console.log('{% trans %}TaggableType Error : Fcbkcomplete plugin is not loaded.{% endtrans %}');
                }
            });
        </script>
    {% endif %}
{% endblock taggable_widget %}